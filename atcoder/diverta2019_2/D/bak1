import sys
from fractions import Fraction

sys.setrecursionlimit(10 ** 8)
ni = lambda: int(sys.stdin.readline())
nm = lambda: map(int, sys.stdin.readline().split())
nl = lambda: list(nm())
ns = lambda: sys.stdin.readline().rstrip()

N = ni()
g1, s1, b1 = nm()
g2, s2, b2 = nm()


def solve():
    gr, sr, br = (g2, g1), (s2, s1), (b2, b1)
    rp = sorted([(Fraction(n, d), n, d) for (n, d) in [gr, sr, br] if n > d])
    rn = sorted([(Fraction(n, d), n, d) for (n, d) in [gr, sr, br] if n < d])

    # Start
    don, dont = N, 0
    # A
    for _, m2, m1 in rp[::-1]:
        dd = don // m1
        don %= m1
        dont += dd * m2
    # B
    don += dont
    dont = 0
    for _, m2, m1 in rn:
        dd = don // m2
        don %= m2
        dont += dd * m1
    # A
    don += dont
    dont = 0
    return don


print(solve())
